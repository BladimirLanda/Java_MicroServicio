<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.ebac.modulo65</groupId>
	<artifactId>modulo65</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>modulo65</name>
	<description>Demo project for Spring Boot</description>
	<url/>

	<licenses>
		<license/>
	</licenses>

	<developers>
		<developer/>
	</developers>

	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>

	<properties>
		<java.version>17</java.version>
	</properties>

	<dependencies>
		<!--SpringBoot Web-Starter-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--SpringBoot Web-Test-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--SpringBoot-Data JPA-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>3.3.5</version>
		</dependency>

		<!--JDBC Driver of the MySQL protocol-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.33</version>
		</dependency>

		<!--H2-Database Driver Engine-->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.3.232</version>
			<scope>runtime</scope>
		</dependency>

		<!--
		Lombok Annotation-Project
		Es una biblioteca para Java que reduce el código repetitivo mediante anotaciones.
		Se usa principalmente para generar automáticamente métodos como getter, setter, equals,
		hashCode, toString, constructores y más, sin necesidad de escribirlos manualmente.
		@Getter y @Setter: Generan métodos getter y setter.

		@NoArgsConstructor: Genera un constructor vacío.
		@AllArgsConstructor: Genera un constructor con todos los campos.
		@RequiredArgsConstructor: Genera un constructor con los campos marcados como final.
		@ToString: Genera toString().
		@EqualsAndHashCode: Genera equals() y hashCode().
		@Data: Combina @Getter, @Setter, @ToString, @EqualsAndHashCode y @RequiredArgsConstructor.
		@Slf4j:Genera automáticamente un logger de SLF4J
		-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.36</version>
			<scope>provided</scope>
		</dependency>

		<!--
		Logback Logging-Classic
		Es una librería de implementación de registro (logging) para Java.
		Se usa para gestionar logs de aplicaciones de manera eficiente. Es
		la implementación predeterminada para SLF4J (Simple Logging Facade for Java).

		1) logback-core → Base del framework (necesario para logback-classic).
		2) logback-classic → Implementación completa de logging compatible con SLF4J (necesita org.slf4j).
		3) logback-access → Para registrar logs en aplicaciones web basadas en Servlets.

		Nota: En versiones antiguas, logback-classic incluía logback-core automáticamente,
		desde Logback 1.4+, necesitas agregar logback-core manualmente.
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.5.12</version>
		</dependency>

		Nota: El "annotation processing" es una característica que permite a
		herramientas como Logback procesar las anotaciones y
		generar código en tiempo de compilación. Habilitar:
		File > Settings > Build, Execution, Deployment > Compiler > Annotation Processors
		>Enable annotation processing (true/false)
		-->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.5.12</version>
		</dependency>

		<!--Test mockito-core-->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.14.2</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!--SprinBoot-Maven-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>

		<!--
		Recursos Disponibles en la Compilación

		✔ Cuando se necesita que ciertos valores cambien dependiendo del perfil (dev o prod).
		✔ Cuando se usa Spring Boot y necesitas variables dinámicas en application.properties/.yml

		En caso de perfiles Spring Boot sigue la convención de nombres (application-{profile}.properties).
		-->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!--Filtrado de Propiedades a Valores Definidos en el POM-->
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>

	<!--Implementación de Perfiles-->
	<profiles>
		<!--Desarrollo-->
		<profile>
			<id>dev</id>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>

		<!--Producción-->
		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>
		</profile>

		<!-- INTERFAZ (VM options): -Dspring.profiles.active=dev/prod -->
		<!-- EJECUCIÓN: java -jar -Dspring.profiles.active=dev/prod App.jar -->
	</profiles>
</project>
